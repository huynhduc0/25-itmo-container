apiVersion: apps/v1
kind: Deployment
metadata:
  name: flask-app
  labels:
    app: flask-app
    tier: backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: flask-app
      tier: backend
  template:
    metadata:
      labels:
        app: flask-app
        tier: backend
    spec:
      initContainers:
        - name: init-db
          image: {{ .Values.init_db.image.repository }}:{{ .Values.init_db.image.tag }}
          imagePullPolicy: {{ .Values.init_db.image.pullPolicy }}
          command: ["/bin/bash", "-c", "cp /config/init_db.sh /scripts/init_db.sh && chmod +x /scripts/init_db.sh && /scripts/init_db.sh"]
          env:
            - name: DB_NAME
              valueFrom:
                secretKeyRef:
                  name: db-credentials
                  key: POSTGRES_DB
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: db-credentials
                  key: POSTGRES_USER
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: db-credentials
                  key: POSTGRES_PASSWORD
          volumeMounts:
            - name: init-script
              mountPath: /config/init_db.sh
              subPath: init_db.sh
            - name: init-script-writable
              mountPath: /scripts
              subPath: ""
      containers:
        - name: flask-app
          image: {{ .Values.app.image.repository }}:{{ .Values.app.image.tag }}
          imagePullPolicy: {{ .Values.app.image.pullPolicy }}
          ports:
            - containerPort: {{ index .Values.app.ports 0 }}
          env:
            - name: DB_NAME
              valueFrom:
                secretKeyRef:
                  name: db-credentials
                  key: POSTGRES_DB
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: db-credentials
                  key: POSTGRES_USER
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: db-credentials
                  key: POSTGRES_PASSWORD
            {{- range $key, $value := .Values.app.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}            
          livenessProbe:
            httpGet:
              path: /
              port: {{ index .Values.app.ports 0 }}
            initialDelaySeconds: 3
            periodSeconds: 30
      volumes:
        - name: init-script
          configMap:
            name: init-db-configmap
        - name: init-script-writable
          emptyDir: {}
